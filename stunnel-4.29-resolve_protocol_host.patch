diff -upr stunnel-4.29~orig/src/options.c stunnel-4.29/src/options.c
--- stunnel-4.29~orig/src/options.c	2009-11-20 23:55:12.000000000 +0300
+++ stunnel-4.29/src/options.c	2014-06-27 17:11:39.166859839 +0400
@@ -737,6 +741,29 @@ static char *service_options(CMD cmd, LO
         break;
     }
 
+    /* resolve_protocol_host */
+    switch(cmd) {
+    case CMD_INIT:
+        section->option.resolve_protocol_host=0;
+        break;
+    case CMD_EXEC:
+        if(strcasecmp(opt, "resolveProtocolHost"))
+            break;
+        if(!strcasecmp(arg, "yes"))
+            section->option.resolve_protocol_host=1;
+        else if(!strcasecmp(arg, "no"))
+            section->option.resolve_protocol_host=0;
+        else
+            return "Argument should be either 'yes' or 'no'";
+        return NULL; /* OK */
+    case CMD_DEFAULT:
+        break;
+    case CMD_HELP:
+        s_log(LOG_RAW, "%-15s = yes|no resolve 'protocolHost' before connecting option",
+            "resolveProtocolHost");
+        break;
+    }
+
     /* delay */
     switch(cmd) {
     case CMD_INIT:
diff -upr stunnel-4.29~orig/src/protocol.c stunnel-4.29/src/protocol.c
--- stunnel-4.29~orig/src/protocol.c	2009-10-30 14:14:02.000000000 +0300
+++ stunnel-4.29/src/protocol.c	2014-06-27 17:11:48.589821839 +0400
@@ -405,9 +405,26 @@ static void connect_client(CLI *c) {
         s_log(LOG_ERR, "protocolHost not specified");
         longjmp(c->err, 1);
     }
+    char resolved_protocol_host[STRLEN];
+
+    if (c->opt->option.resolve_protocol_host) {
+	    SOCKADDR_LIST protocol_host;
+	    memset(&protocol_host, 0, sizeof(SOCKADDR_LIST));
+	    protocol_host.addr[0].in.sin_family=AF_INET;
+	    if(!name2addrlist(&protocol_host, c->opt->protocol_host, DEFAULT_ANY)){
+		    s_log(LOG_ERR, "Can't resolve protocol_host");
+		    longjmp(c->err, 1);
+	    }
+	    sprintf(resolved_protocol_host, "%s:%d",
+			    inet_ntoa((struct in_addr)protocol_host.addr[0].in.sin_addr),
+			    ntohs(protocol_host.addr[0].in.sin_port));
+    } else {
+	    sprintf(resolved_protocol_host,"%s",c->opt->protocol_host);
+    }
+
     fdprintf(c, c->remote_fd.fd, "CONNECT %s HTTP/1.1",
-        c->opt->protocol_host);
-    fdprintf(c, c->remote_fd.fd, "Host: %s", c->opt->protocol_host);
+        resolved_protocol_host);
+    fdprintf(c, c->remote_fd.fd, "Host: %s", resolved_protocol_host);
     if(c->opt->protocol_username && c->opt->protocol_password) {
         if(!strcasecmp(c->opt->protocol_authentication, "NTLM")) {
 
@@ -445,8 +462,8 @@ static void connect_client(CLI *c) {
 
             /* send Proxy-Authorization (phase 3) */
             fdprintf(c, c->remote_fd.fd, "CONNECT %s HTTP/1.1",
-                c->opt->protocol_host);
-            fdprintf(c, c->remote_fd.fd, "Host: %s", c->opt->protocol_host);
+                resolved_protocol_host);
+            fdprintf(c, c->remote_fd.fd, "Host: %s", resolved_protocol_host);
             encoded=ntlm3(c->opt->protocol_username, c->opt->protocol_password,
                 ntlm2);
             safecopy(line, encoded);
diff -upr stunnel-4.29~orig/src/prototypes.h stunnel-4.29/src/prototypes.h
--- stunnel-4.29~orig/src/prototypes.h	2009-10-30 14:14:23.000000000 +0300
+++ stunnel-4.29/src/prototypes.h	2014-06-27 17:11:52.402806463 +0400
@@ -224,6 +224,7 @@ typedef struct local_options {
 
         /* on/off switches */
     struct {
+        unsigned int resolve_protocol_host:1;
         unsigned int cert:1;
         unsigned int client:1;
         unsigned int delayed_lookup:1;

